from tinydb import TinyDB, Query# Создаем базу данных и таблицуdb = TinyDB('db.json')table = db.table('users')table_admin = db.table('locations')# Класс для управления CRUD-операциями для пользователейclass UM:    @staticmethod    def check_in_db(id):        User = Query()        result = table.search(User.id == id)        return len(result) > 0    @staticmethod    def register(username, age, id, FIO, num):        if not UM.check_in_db(username):            table.insert({'username': username,                          'id': id,                          'FIO': FIO,                          'age': age,                          'number': num,                          'activity': {}                          })    @staticmethod    def get_user_data(username):        User = Query()        return table.search(User.username == username)    @staticmethod    def update_user(username, new_data):        User = Query()        table.update(new_data, User.username == username)    @staticmethod    def delete_user(username):        User = Query()        table.remove(User.username == username)    @staticmethod    def get_all_users_data():        return table.all()# Класс для управления CRUD-операциями для пользователейclass UMD:    @staticmethod    def check_in_db(name):        User = Query()        result = table_admin.search(User.name == name)        return len(result) > 0    @staticmethod    def create_adress(name, link, count, username):        if not UM.check_in_db(name):            table_admin.insert({'name': name,                          'link': link,                          'count': count,                          'username': username,                          'users': {}                        })    @staticmethod    def get_user_data(name):        User = Query()        return table_admin.search(User.name == name)    @staticmethod    def update_user(name, new_data):        User = Query()        table_admin.update(new_data, User.name == name)    @staticmethod    def delete_user(name):        User = Query()        table_admin.remove(User.name == name)    @staticmethod    def get_all_users_data():        return table_admin.all()