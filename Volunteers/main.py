from pyrogram import Client, filtersfrom pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemoveimport configparser as cpfrom utils import *import timefrom crud import UM, UMDimport matplotlib.pyplot as pltimport numpy as npimport scheduleimport openaifrom mtranslate import translateDEBUG = False#region STARTcfg = cp.ConfigParser()cfg.read('config.ini')token_bot = cfg.get('API_KEYS', 'tokenBot')api_hash = cfg.get('API_KEYS', 'apiHash')api_id = int(cfg.get('API_KEYS', 'apiId'))openai_api = cfg.get('API_KEYS', 'openai_api')openai.api_key = openai_apiadmin_pack = cfg.items('ADMIN_LIST')admins = []for admin in admin_pack:    admins.append(int(admin[1]))log(admins)app = Client("my_bot", api_id=api_id, api_hash=api_hash, bot_token=token_bot)#endregion#region COMMAND START@app.on_message(filters.command("start") & filters.group)def start_command(client, message):    client.send_message(message.chat.id, "Привет! Добро пожаловать.")# Обработчик команды /start@app.on_message(filters.command("start") & filters.private)def start_command(client, msg):    client.send_message(msg.chat.id, "Привет! Добро пожаловать в лс боту.")    global add_admin    global del_admin    global single_admins    global admin_pack    global admins    global add_adress    global name_adress    global link_adress    global count_adress    global username_adress    global reg_adress    global switches    global time_for_spm    try:        add_admin[msg.from_user.id] = False    except:        pass    try:        del_admin[msg.from_user.id] = False    except:        pass    try:        single_admins[msg.from_user.id] = False    except:        pass    try:        admin_pack[msg.from_user.id] = False    except:        pass    try:        admins[msg.from_user.id] = False    except:        pass    try:        add_adress[msg.from_user.id] = False    except:        pass    try:        name_adress[msg.from_user.id] = False    except:        pass    try:        link_adress[msg.from_user.id] = False    except:        pass    try:        count_adress[msg.from_user.id] = False    except:        pass    try:        username_adress[msg.from_user.id] = False    except:        pass    try:        reg_adress[msg.from_user.id] = False    except:        pass    try:        switches[msg.from_user.id] = False    except:        pass    try:        time_for_spm[msg.from_user.id] = False    except:        pass#endregion#region NEW MEMBERS@app.on_message(filters.new_chat_members)def new_chat_members(client, message):    for member in message.new_chat_members:        if member.username:            client.send_message(                message.chat.id,                f"Привет, {member.username}! Добро пожаловать в чат!",            )        else:            client.send_message(                message.chat.id,                f"Привет! Добро пожаловать в чат!",            )#endregion# Функция для отправки сообщенияdef send_message(client, UM):    users = UM.get_all_users_data()    keyboard = ReplyKeyboardMarkup(        keyboard=[            [KeyboardButton("ДА!"), KeyboardButton("Нет, не смогу(")]],        resize_keyboard=True)    for user in users:        text = f"Салам {user['FIO']}!\nХочешь волонтерить сегодня?"        client.send_message(chat_id=user['id'], text=text, reply_markup=keyboard)# Запланировать задачу на ежедневную отправку сообщенияdef schedule_daily_message(client, chat_id, schedule_time):    client.send_message(chat_id, f'Вы изменили время рассылки на {schedule_time}', reply_markup=ReplyKeyboardRemove())    schedule.every().day.at(schedule_time).do(send_message, client, UM)    while True:        schedule.run_pending()        time.sleep(1)add_admin = {}del_admin = {}del_admins = {}single_admins = {}add_adress = {}reg_adress = {}name_adress = {}link_adress = {}count_adress = {}username_adress = {}time_for_spm = {}switches = [add_admin,            del_admin,            single_admins,            admin_pack,            admins,            add_adress,            name_adress,            link_adress,            count_adress,            username_adress,            reg_adress]#region ADMIN@app.on_message(filters.text & filters.user(admins) & filters.private)def start(client, msg):    cmd = Refactor(msg.text, slice=True)    cmd_ns = Refactor(msg.text)    cmd1l = cmd[0].lower()    chat_id = msg.chat.id    chat_info = app.get_chat(chat_id)    chat_type = chat_info.type    if msg.reply_to_message:        reply_user = msg.reply_to_message.from_user    else:        reply_user = False    global add_admin    global del_admin    global single_admins    global admin_pack    global admins    global add_adress    global name_adress    global link_adress    global count_adress    global username_adress    global reg_adress    global switches    global time_for_spm    try:        if time_for_spm[msg.from_user.id]:            pass    except KeyError:        time_for_spm[msg.from_user.id] = False    try:        if name_adress[msg.from_user.id]:            pass    except KeyError:        name_adress[msg.from_user.id] = False    try:        if link_adress[msg.from_user.id]:            pass    except KeyError:        link_adress[msg.from_user.id] = False    try:        if count_adress[msg.from_user.id]:            pass    except KeyError:        count_adress[msg.from_user.id] = False    try:        if username_adress[msg.from_user.id]:            pass    except KeyError:        username_adress[msg.from_user.id] = False    try:        if del_admin[msg.from_user.id]:            pass    except KeyError:        del_admin[msg.from_user.id] = False    try:        if add_admin[msg.from_user.id]:            pass    except KeyError:        add_admin[msg.from_user.id] = False    try:        if single_admins[msg.from_user.id]:            pass    except KeyError:        single_admins[msg.from_user.id] = False    try:        if add_adress[msg.from_user.id]:            pass    except KeyError:        add_adress[msg.from_user.id] = False    if cmd1l in ['адм', 'admin', 'menu', 'назад']:        keyboard = ReplyKeyboardMarkup(            keyboard=[                [KeyboardButton("Рассылка"), KeyboardButton("Новости")],                [KeyboardButton("Статистика"), KeyboardButton("Помощь"), KeyboardButton("Волонтеры")],                [KeyboardButton("Добавить админа"), KeyboardButton("Убрать админа")],                [KeyboardButton("Список админов")],                [KeyboardButton("Добавить локацию"), KeyboardButton("Настройки")],                [KeyboardButton("..."), KeyboardButton("..."), KeyboardButton("...")]#TODO admin panel            ],            resize_keyboard=True)        if cmd1l == 'назад':            msg.reply_text('Вернемся меню', reply_markup=keyboard)        else:            msg.reply_text('Установка админки', reply_markup=keyboard)    elif cmd1l == 'help':        text = 'Привет админ, я СактаймБот помощник!\n'        text += 'В основном со мной общаются в лс\n\n'        text += 'Команды можно увидеть в выпадающем меню команд\n\n'        text += 'Вот самые основные: \n'        text += '/start - Запуск бота\n'        text += '/help - Это сообщение\n'        text += '/register - Регистрация волонтеров\n'        text += '/menu - меню навигации\n'        msg.reply_text(text)    elif msg.text == 'Рассылка':        single_admins[msg.from_user.id] = not single_admins[msg.from_user.id]        msg.reply_text('Хорошо, напишите сообщение, которое отправится всем юзерам')    elif msg.text == 'Новости':        pass    elif msg.text == 'Помощь':        pass    elif msg.text in ['Статистика', 'Возрасты', 'Локации', 'Активность', 'Добавить локацию']:        if msg.text == 'Статистика':            keyboard = ReplyKeyboardMarkup(                keyboard=[                    [KeyboardButton("Возрасты"), KeyboardButton("Локации")],                    [KeyboardButton("Активность")],                    [KeyboardButton("Назад")]                ],                resize_keyboard=True)            msg.reply_text('Что именно вы бы хотели узнать?', reply_markup=keyboard)        elif msg.text == 'Возрасты':            data = UM.get_all_users_data()            if len(data) > 0:                ages = [d['age'] for d in data]                age_counts = {}                for age in ages:                    age_counts[age] = age_counts.get(age, 0) + 1                color = 'lightgreen'  # Ваш выбранный цвет                n = len(age_counts)                colors = plt.cm.get_cmap('coolwarm', n)(np.linspace(0, 1, n))                plt.bar(age_counts.keys(), age_counts.values(), color=colors, edgecolor='none')                plt.xlabel('Возраст')                plt.ylabel('Количество пользователей')                plt.title('График возрастов в базе данных')                plt.xticks(list(age_counts.keys()))                plt.ticklabel_format(style='plain')                plt.savefig(f'age_chart{msg.from_user.id}.png')                client.send_photo(chat_id, f'age_chart{msg.from_user.id}.png', caption='График возрастов в базе данных')            else:                msg.reply_text('В базе данных пока нет волонтеров(')        elif msg.text == 'Локации':            data = UMD.get_all_users_data()            if len(data) > 0:                c = 1                btns = []                for adress in data:                    text = adress['name']                    btns.append([InlineKeyboardButton(f"{adress['name']}", callback_data=f"location_{text}")])                reply_markup = InlineKeyboardMarkup(btns)                msg.reply_text("Список локаций", reply_markup=reply_markup)            else:                keyboard = ReplyKeyboardMarkup(                    keyboard=[                        [KeyboardButton("Добавить локацию")],                        [KeyboardButton("Назад")]                    ],                    resize_keyboard=True)                msg.reply_text('Извините, но в базе данных нет ни одной зарегистрированной локации', reply_markup=keyboard)        elif msg.text == 'Добавить локацию':            msg.reply_text('Хорошо, введите название локации')            reg_adress[msg.from_user.id] = {}            add_adress[msg.from_user.id] = not add_adress[msg.from_user.id]            name_adress[msg.from_user.id] = not name_adress[msg.from_user.id]        elif msg.text == 'Активность':            data = UM.get_all_users_data()            # Проверка на наличие пользователей            if not data:                msg.reply_text('В базе данных пока нет волонтеров')            else:                all = []                for user in data:                    try:                        all.append((user['activity']['count'], user['FIO']))                    except KeyError:                        all.append(0, user['FIO'])                sorted = []                for el in all:                    if el[0] != 0:                        sorted.append(el)                if sorted:                    sorted_list = sorted(sorted, key=lambda x: x[0])                    sorted_list = sorted_list[:20]                    text = 'Топ лучших:'                    for user in sorted_list:                        text += f"{user[1]} - {user[0]}\n"                    msg.reply_text(text)                else:                    msg.reply_text('Пока никто еще не активничал(')    elif msg.text == 'Волонтеры':        data = UM.get_all_users_data()        if len(data) < 1:            msg.reply_text('В базе данных пока нет волонтеров(')        else:            display_names_buttons(client, msg, 1, data, InlineKeyboardButton, InlineKeyboardMarkup)    elif msg.text == 'Добавить админа':        add_admin[msg.from_user.id] = True        msg.reply_text('Хорошо, скиньте ссылку на юзера\nПример: @example_admin123')    elif msg.text == 'Убрать админа':        del_admins[msg.from_user.id] = {        }        text = ''        c = 1        for admin in admin_pack:            id = int(admin[1])            text += f"{c}. {getUserLink(id, admin[0])}\n"            del_admins[msg.from_user.id][c] = admin[1]            c += 1        msg.reply_text('Хорошо, выберите какой (номер)')        msg.reply_text(text)        del_admin[msg.from_user.id] = True    elif msg.text == 'Список админов':        text = ''        c = 1        for admin in admin_pack:            id = int(admin[1])            text += f"{c}. {getUserLink(id, admin[0])}\n"            c += 1        msg.reply_text(text)    elif msg.text == 'Настройки':        keyboard = ReplyKeyboardMarkup(            keyboard=[                [KeyboardButton("Время напоминания локаций")],                [KeyboardButton("...")],                [KeyboardButton("Назад")]            ],            resize_keyboard=True)        msg.reply_text('Что именно вы бы хотели узнать?', reply_markup=keyboard)    elif msg.text == 'Время напоминания локаций':        msg.reply_text('Хорошо, введите время для напоминаний')        msg.reply_text('По умолчанию стоит 8:00')        time_for_spm[msg.from_user.id] = not time_for_spm[msg.from_user.id]    elif msg.text == '...':        msg.reply_text('В разработке, скоро')    elif cmd1l == 'register':        msg.reply_text('Извините, но вы являетесь <b>администратором</b> и не можете зарегистрироваться от имени волонтера в боте')    elif add_adress[msg.from_user.id]:        if name_adress[msg.from_user.id]:            if msg.text:                reg_adress[msg.from_user.id]['name'] = msg.text                msg.reply_text(f'Название - <b>{msg.text}</b>')                msg.reply_text('Введите ссылку на гео адреса (желательно 2гис)')                name_adress[msg.from_user.id] = not name_adress[msg.from_user.id]                link_adress[msg.from_user.id] = not link_adress[msg.from_user.id]            else:                msg.reply_text('Название содержит запретные символы')        elif link_adress[msg.from_user.id]:            clean_link = extract_clean_link(msg.text)            log(clean_link)            if clean_link and check_geo_link(clean_link):                msg.reply_text(f'{getStringLink(clean_link, "Ссылка")}\nСсылка сохранена')                reg_adress[msg.from_user.id]['link'] = clean_link                link_adress[msg.from_user.id] = not link_adress[msg.from_user.id]                count_adress[msg.from_user.id] = not count_adress[msg.from_user.id]                msg.reply_text('Теперь укажите количество свободных мест в локации (Количество будет закреплено к локации пока админы не изменят ее количество)')            else:                msg.reply_text(f"Строка {msg.text} не содержит ссылку 2ГИС, Яндекса или Google Геолокации.")        elif count_adress[msg.from_user.id]:            count = msg.text            if count.isdigit():                reg_adress[msg.from_user.id]['count'] = int(count)                msg.reply_text(f'В локации закреплено - {count} свободных мест')                count_adress[msg.from_user.id] = not count_adress[msg.from_user.id]                adress = reg_adress[msg.from_user.id]                username = msg.from_user.first_name                if msg.from_user.last_name:                    username += f" {msg.from_user.last_name}"                UMD.create_adress(adress['name'], adress['link'], adress['count'], username)                time.sleep(1)                msg.reply_text('Локация успешно создана\nОна будет видна при следующей рассылке')            else:                msg.reply_text('Не корректный ввод количества')    elif add_admin[msg.from_user.id]:        userr = GetUserId(msg.text)        if userr:            user = app.get_users(userr)            if user:                name = user.first_name                if user.last_name:                    name += f" {user.last_name}"                msg.reply_text(f"Добавлен админ - {getUserLink(user.id, name)}")                app.send_message(user.id, 'Вас добавили в систему в качестве админа! Поздравляю')                app.send_message(user.id, 'Напишите <code>адм</code> или команду - /menu для вызова админ-панели')                update_config(cfg, 'ADMIN_LIST', name, str(user.id))                add_admin[msg.from_user.id] = not add_admin[msg.from_user.id]                admin_pack = cfg.items('ADMIN_LIST')                admins = []                for admin in admin_pack:                    admins.append(int(admin[1]))                log(admins)            else:                msg.reply_text('Извините, но такой юзер не найден')    elif del_admin[msg.from_user.id]:        del_list = del_admins[msg.from_user.id]        if msg.text.isdigit():            if len(del_list) >= int(msg.text):                user = app.get_users(del_list[int(msg.text)])                if user:                    name = user.first_name                    if user.last_name:                        name += f" {user.last_name}"                    delete_config(cfg, 'ADMIN_LIST', name)                    msg.reply_text('Админ удален из системы.')                    del_admin[msg.from_user.id] = not del_admin[msg.from_user.id]    elif single_admins[msg.from_user.id]:        spm_txt = msg.text        n = 300        if len(spm_txt) <= n:            log(f"SPAM - {spm_txt}")            data = UM.get_all_users_data()            spm_list = []            for user in data:                spm_list.append(user['id'])            msg.reply_text(f'Отправка сообщения {len(spm_list)} волонтерам')            SingleMsg(app, spm_txt, cmd='spm', list_ids=spm_list)            single_admins[msg.from_user.id] = not single_admins[msg.from_user.id]        else:            msg.reply_text(f'Слишком большой текст (макс: {n} символов)')    elif time_for_spm[msg.from_user.id]:        if is_valid_time_format(msg.text):            time_for_spm[msg.from_user.id] = not time_for_spm[msg.from_user.id]            schedule_daily_message(app, chat_id, msg.text)        else:            msg.reply_text('Время написано неверно, повторите пожалуйста без ошибки (формат - ЧЧ:ММ)')    else:        if DEBUG:            msg.reply_text(f"debug = {msg.text}")        else:            log(msg.text)            #ChatGptSys(app, msg, openai, translate, cmd)#endregion@app.on_message(filters.group & filters.text)def Start(client, msg):    cmd = Refactor(msg.text, slice=True)    cmd_ns = Refactor(msg.text)    #region CMD    if cmd[0].lower() == 'help':        text = 'Привет, я СактаймБот помощник!\n'        text += 'В основном со мной общаются в лс\n\n'        text += 'Команды можно увидеть в выпадающем меню команд\n\n'        text += 'Вот самые основные: \n'        text += '/start - Запуск бота\n'        text += '/help - Это сообщение\n'        text += '/register - Регистрация волонтеров\n'        text += '/menu - меню навигации\n'        msg.reply_text(text)    else:        pass        #msg.reply_text('Ой, кажется вы не зарегистрированы.\nПожалуйста зарегистрируйтесь в лс с ботом.')    #endregion    passreg_json = {}fio_switch = {}age_switch = {}num_switch = {}all_switch = {}users_menu = ReplyKeyboardMarkup(    keyboard=[        [KeyboardButton("...")],        [KeyboardButton("..."), KeyboardButton("...")],        [KeyboardButton("...")],        [KeyboardButton("..."), KeyboardButton("...")],        [KeyboardButton("Убрать меню")]    ],    resize_keyboard=True)@app.on_message(filters.private & filters.contact)def Start(client, msg):    global fio_switch    global age_switch    global num_switch    global all_switch    if num_switch[msg.from_user.id]:        reg_json[msg.from_user.id]['num'] = msg.contact.phone_number        if not all_switch[msg.from_user.id]:            msg.reply_text('Отлично, вот ваша анкета:')            user = reg_json[msg.from_user.id]            text = f'ФИО - {user["fio"]}\n'            text += f'Возраст - {user["age"]}\n'            text += f'Номер - {user["num"]}\n'            time.sleep(0.5)            msg.reply_text(text)            keyboard = ReplyKeyboardMarkup(                keyboard=[                    [KeyboardButton("Да, поехали!")],                    [KeyboardButton("Нет, я хочу поменять данные")]                ],                resize_keyboard=True)            msg.reply_text('Все верно?', reply_markup=keyboard)            all_switch[msg.from_user.id] = not all_switch[msg.from_user.id]        else:            msg.reply_text('Отлично, инфа изменена')@app.on_message(filters.private & filters.text)def Start(client, msg):    cmd = Refactor(msg.text, slice=True)    cmd1l = cmd[0].lower()    check = UM.check_in_db(id=msg.from_user.id)    log('-'.join(cmd) + f' : {msg.from_user.id}')    #region REGCHECK    try:        user_json = reg_json[msg.from_user.id]    except KeyError:        user_json = False    global fio_switch    global age_switch    global num_switch    global all_switch    if user_json:        if fio_switch[msg.from_user.id]:            if validFIO(msg.text):                reg_json[msg.from_user.id]['fio'] = msg.text                msg.reply_text(f'Ваше ФИО: <b>{msg.text}</b>\nЕсли допустили опечатку, у вас будет возможность изменить что то в конце регистрации ^^')                time.sleep(0.3)                if not all_switch[msg.from_user.id]:                    msg.reply_text(f"И так, сколько вам лет?")                    age_switch[msg.from_user.id] = not age_switch[msg.from_user.id]                    fio_switch[msg.from_user.id] = not fio_switch[msg.from_user.id]                else:                    fio_switch[msg.from_user.id] = not fio_switch[msg.from_user.id]                    msg.reply_text('Отлично, вот ваша анкета:')                    user = reg_json[msg.from_user.id]                    text = f'ФИО - {user["fio"]}\n'                    text += f'Возраст - {user["age"]}\n'                    text += f'Номер - {user["num"]}\n'                    time.sleep(0.5)                    msg.reply_text(text)                    keyboard = ReplyKeyboardMarkup(                        keyboard=[                            [KeyboardButton("Да, поехали!")],                            [KeyboardButton("Нет, я хочу поменять данные")]                        ],                        resize_keyboard=True)                    msg.reply_text('Все верно?', reply_markup=keyboard)            else:                if len(msg.text) > 40:                    msg.reply_text('Ваш текст не разпознан как ФИО.\nВведите пожалуйста корректное ФИО')                else:                    msg.reply_text(f'Текст - <b>{msg.text}</b>, не разпознан как ФИО.\nВведите пожалуйста корректное ФИО')        elif age_switch[msg.from_user.id]:            age_nc = msg.text            if age_nc.isdigit():                age_nc = int(age_nc)                if age_nc <= 10:                    msg.reply_text(f"<b>{msg.text}</b>\n Ваш возраст слишком мал для волонтерства(")                elif age_nc >= 100:                    msg.reply_text(f"<b>{msg.text}</b>\n Вы динозавр?)")                else:                    reg_json[msg.from_user.id]['age'] = age_nc                    msg.reply_text(f'Хорошо, ваш возраст - {age_nc}')                    if not all_switch[msg.from_user.id]:                        num_switch[msg.from_user.id] = not num_switch[msg.from_user.id]                        keyboard = ReplyKeyboardMarkup(                            keyboard=[                                [KeyboardButton("Отправить свой номер", request_contact=True)]                            ],                            resize_keyboard=True)                        msg.reply_text('Теперь отправьте свой номер, чтобы мы могли связаться с вами', reply_markup=keyboard)                        age_switch[msg.from_user.id] = not age_switch[msg.from_user.id]                    else:                        age_switch[msg.from_user.id] = not age_switch[msg.from_user.id]                        msg.reply_text('Отлично, вот ваша анкета:')                        user = reg_json[msg.from_user.id]                        text = f'ФИО - {user["fio"]}\n'                        text += f'Возраст - {user["age"]}\n'                        text += f'Номер - {user["num"]}\n'                        time.sleep(0.5)                        msg.reply_text(text)                        keyboard = ReplyKeyboardMarkup(                            keyboard=[                                [KeyboardButton("Да, поехали!")],                                [KeyboardButton("Нет, я хочу поменять данные")]                            ],                            resize_keyboard=True)                        msg.reply_text('Все верно?', reply_markup=keyboard)            else:                if len(msg.text) > 20:                    msg.reply_text('Данный текст не является возрастом.')                else:                    msg.reply_text(f"<b>{msg.text}</b> не является возрастом.")        elif all_switch[msg.from_user.id]:            if msg.text == 'Да, поехали!':                user = reg_json[msg.from_user.id]                UM.register(user['username'], user['age'], user['id'], user['fio'], user['num'])                global users_menu                msg.reply_text('Вы зарегистрированы!', reply_markup=users_menu)                time.sleep(0.3)                msg.reply_text('PASS TO DO')#TODO pass                fio_switch[msg.from_user.id] = False                age_switch[msg.from_user.id] = False                num_switch[msg.from_user.id] = False                all_switch[msg.from_user.id] = False                reg_json.pop(msg.from_user.id)                log(f'register {msg.from_user.first_name}')            elif msg.text == 'Нет, я хочу поменять данные':                keyboard = ReplyKeyboardMarkup(                    keyboard = [                                   [KeyboardButton("ФИО")],                                   [KeyboardButton("Возраст")],                                   [KeyboardButton("Номер")]                               ],                    resize_keyboard = True)                msg.reply_text('Окей, что вы хотите изменить?', reply_markup=keyboard)            elif msg.text == 'ФИО':                fio_switch[msg.from_user.id] = not fio_switch[msg.from_user.id]                msg.reply_text('Хорошо, отправьте ФИО')            elif msg.text == 'Возраст':                age_switch[msg.from_user.id] = not age_switch[msg.from_user.id]                msg.reply_text('Хорошо, введите ваш возраст')            elif msg.text == 'Номер':                keyboard = ReplyKeyboardMarkup(                    keyboard=[                        [KeyboardButton("Отправить свой номер", request_contact=True)]                    ],                    resize_keyboard=True)                num_switch[msg.from_user.id] = not num_switch[msg.from_user.id]                msg.reply_text('Окей отправьте ваш номер', reply_markup=keyboard)        return    #endregion    #region CMD    if cmd1l == 'register':        if not check:            app.send_message(msg.chat.id, 'Отлично')            fio_switch[msg.from_user.id] = False            age_switch[msg.from_user.id] = False            num_switch[msg.from_user.id] = False            all_switch[msg.from_user.id] = False            reg_json[msg.from_user.id] = {'username': msg.from_user.first_name,                                          'id': msg.from_user.id,                                          'num': None,                                          'fio': None,                                          'age': None                                          }            fio_switch[msg.from_user.id] = not fio_switch[msg.from_user.id]            app.send_message(msg.chat.id, 'Напишите ваше полное ФИО')        else:            msg.reply_text('Вы уже в системе! слышите! Уже в системе!)')    elif cmd1l in ['меню', 'menu', 'navigation_bar']:        if check:            msg.reply_text('Устанавливаю меню', reply_markup=users_menu)    elif cmd1l == 'admin':        msg.reply_text('Извините, но это админ панель, только для админов')    elif msg.text == 'Убрать меню':        try:            msg.reply_text('Хорошо, убираю меню!', reply_markup=ReplyKeyboardRemove())        except:            msg.reply_text('Убираю меню!')    elif msg.text == 'Нет, не смогу(':        msg.reply_text('Хорошо, ждем в следующий раз!')    elif msg.text == 'ДА!':        msg.reply_text('Отлично! Вот локации:')        msg.reply_text('доделать') #TODO SPM USERS CALLBACK    elif msg.text == 'help':        text = 'Привет, я СактаймБот помощник!\n'        text += 'В основном со мной общаются в лс\n\n'        text += 'Команды можно увидеть в выпадающем меню команд\n\n'        text += 'Вот самые основные: \n'        text += '/start - Запуск бота\n'        text += '/help - Это сообщение\n'        text += '/register - Регистрация волонтеров\n'        text += '/menu - меню навигации\n'        msg.reply_text(text)    else:        if DEBUG:            msg.reply_text(f"debug = {msg.text}")        else:            log(msg.text)            #ChatGptSys(app, msg, openai, translate, cmd)    #endregion    pass@app.on_callback_query()def button(bot, update):    data = update.data.split("_")    if data[0] == "previous" or data[0] == "next":        page_num = int(data[1])        if data[0] == "previous" and page_num > 1:            page_num -= 1            log('previous')        elif data[0] == "next":            page_num += 1            log('next')        update.message.delete()        display_names_buttons(bot, update.message, page_num)    elif data[0] == 'location':        info = UMD.get_user_data(data[1])        if info:            adress = info[0]            text_linked = f'Название - {adress["name"]}'            text = f"{getStringLink(adress['link'], text_linked)}\n"            text += f"Количество мест - {adress['count']}\n"            text += f"Кто добавил - {adress['username']}\n\n"            if adress['users']:                for user in adress['users']:                    text += f"{getUserLink(user['id'], user['FIO'])} {user['number']}\n"            else:                text += 'волонтеров на локации нет('            update.message.reply_text(text)log('WITHOUT ERRORS', 'DEBUG')app.run()