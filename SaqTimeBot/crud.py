from tinydb import TinyDB, Query# Создаем базу данных и таблицуdb = TinyDB('db.json')table = db.table('users')table_locations = db.table('locations')table_needies = db.table('needies')table_print = db.table('print')# Класс для управления CRUD-операциями для пользователейclass UM:    @staticmethod    def check_in_db(id):        User = Query()        result = table.search(User.id == id)        return len(result) > 0    @staticmethod    def register(birthdate, id, FIO, num, custody_number, description, email, dorm):        if not UM.check_in_db(id):            table.insert({'id': id,                          'fio': FIO,                          'birthdate': birthdate,                          'number': num,                          'custody_number': custody_number,                          'description': description,                          'email': email,                          'verified': False,                          'activity': {},                          'dorm': dorm                          })    @staticmethod    def get_user_data(id):        User = Query()        return table.search(User.id == id)    @staticmethod    def update_user(id, new_data):        User = Query()        table.update(new_data, User.id == id)    @staticmethod    def update_verify(id, value):        User = Query()        table.update(value, User.id == id)    @staticmethod    def delete_user(id):        User = Query()        if UM.check_in_db(id):            table.remove(User.username == id)    @staticmethod    def get_all_users_data():        return table.all()class UML:    @staticmethod    def check_in_db(date):        User = Query()        result = table_locations.search(User.date == date)        return len(result) > 0    @staticmethod    def get_all_date_data():        return table_locations.all()    @staticmethod    def get_date(date):        result = UML.get_all_date_data()        if result:            for res in result:                if next(iter(res)) == date:                    return res            return False        else:            return False    @staticmethod    def register(date, data):        if not UML.check_in_db(date):            table_locations.insert({date: data})    @staticmethod    def delete_dates(dates):        User = Query()        table_locations.remove(User.dates == dates)class UMneedy:    @staticmethod    def check_in_db(name):        User = Query()        result = table_needies.search(User.name == name)        return len(result) > 0    @staticmethod    def register(name, age, diagnosis, clinic, amount, left_to_collect, date_for_left):        if not UML.check_in_db(name):            table_needies.insert({'name': name,                                  'age': age,                                  'diagnosis': diagnosis,                                  'clinic': clinic,                                  'amount': amount,                                  'left': left_to_collect,                                  'date': date_for_left                                  })    @staticmethod    def delete_needy(dates):        User = Query()        table_needies.remove(User.dates == dates)    @staticmethod    def get_all_needy_data():        return table_needies.all()    @staticmethod    def get(name):        User = Query()        return table_needies.search(User.name == name)class UMP:    @staticmethod    def check_in_db(cmd, data):        User = Query()        if cmd == 'region':            result = table_print.search(User.region == data)            return len(result) > 0        elif cmd == 'location':            result = table_print.search(User.location == data)            return len(result) > 0        elif cmd == 'mosque':            result = table_print.search(User.mosque == data)            return len(result) > 0    @staticmethod    def get_all():        return table_print.all()    @staticmethod    def register(date, data):        if not UML.check_in_db(date):            table_locations.insert({date: data})    @staticmethod    def delete_dates(dates):        User = Query()        table_locations.remove(User.dates == dates)