# region IMPORTSimport configparser as cpimport openaifrom apscheduler.schedulers.background import BackgroundSchedulerfrom mtranslate import translatefrom pyrogram import Client, filtersfrom crud import *from keyboards import *from utils import *import osimport sys# endregionDEBUG = True# region CASHswitch = {    'admin': {},    'private_check_register': {},    'private_check_phone': {},    'private_change_data': {},    'private_correct_data': {},    'private_change_number': {},    'private_change_fio': {},    'private_change_birthdate': {},    'private_change_custnum': {},    'private_change_description': {},    'private_change_email': {},    'private_create_tt': {},    'private_create_firsttime': {},    'private_change_tt': {},    'private_create_jumatable': {},    'private_register_needy': {},    'private_get_feedback': {},    'private_get_idea': {},    'group_': {},    'supergroup_': {},}data = {}global_cash = {}# endregion# region DEFSswitch_starter = Truedef start_upd(app):    with app:        app.send_message(int(admin_chat[0]), '–ó–∞–ø—É—Å–∫ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!üçÄ',                         reply_to_message_id=int(admin_chat[1]))    global switch_starter    switch_starter = Falsedef restart_upd(app):    log("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–∞...")    python = sys.executable    os.execl(python, python, *sys.argv)    with app:        app.send_message(int(admin_chat[0]), '–†–µ—Å—Ç–∞—Ä—Ç –±–æ—Ç–∞!üçÄ',                         reply_to_message_id=int(admin_chat[1]))def switch_off(id):    global switch    for key, item in switch.items():        switch[key][id] = Falsedef switch_turn(id, k):    global switch    for key, item in switch.items():        switch[key][id] = False    switch[k][id] = Truedef getAnketa(datasss, request='null'):    if request == 'adm_request':        text = '–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n\n'        age = calculate_age(datasss['birthdate'])        text += f'<b>{datasss["fio"]}</b>\n'        text += f"–•—ç–ø–∏–∫ - <i>{datasss['birthdate']} ({age} –ª–µ—Ç)</i>\n"        text += f"–Ω–æ–º–µ—Ä - <i>{datasss['number']}</i>\n"        text += f"–ü–æ—á—Ç–∞ - <i>{datasss['email']}</i>\n\n"        text += f"–†–æ–¥–∏—Ç–µ–ª—å (–æ–ø–µ–∫—É–Ω) - <i>{datasss['custody_number']}<i>\n\n"        text += f"–ó–∞–º–µ—Ç–∫–∞ - <i>{datasss['description']}</i>"    elif request == 'new_admin':        text = '<b>–ó–ê–ü–†–û–° –ù–ê –ê–î–ú–ò–ù–ê</b>\n\n'        age = calculate_age(datasss['birthdate'])        text += f'<b>{datasss["fio"]}</b>\n'        text += f"–•—ç–ø–∏–∫ - <i>{datasss['birthdate']} ({age} –ª–µ—Ç)</i>\n"        text += f"–Ω–æ–º–µ—Ä - <i>{datasss['number']}</i>\n"        text += f"–ü–æ—á—Ç–∞ - <i>{datasss['email']}</i>\n\n"        text += f"–†–æ–¥–∏—Ç–µ–ª—å (–æ–ø–µ–∫—É–Ω) - <i>{datasss['custody_number']}<i>\n\n"        text += f"–ó–∞–º–µ—Ç–∫–∞ - <i>{datasss['description']}</i>"    else:        age = calculate_age(datasss['birthdate'])        text = f'<b>{datasss["fio"]}</b>\n'        text += f"–•—ç–ø–∏–∫ - <i>{datasss['birthdate']} ({age} –ª–µ—Ç)</i>\n"        text += f"–Ω–æ–º–µ—Ä - <i>{datasss['number']}</i>\n"        text += f"–ü–æ—á—Ç–∞ - <i>{datasss['email']}</i>\n\n"        text += f"–†–æ–¥–∏—Ç–µ–ª—å (–æ–ø–µ–∫—É–Ω) - <i>{datasss['custody_number']}<i>\n\n"        text += f"–ó–∞–º–µ—Ç–∫–∞ - <i>{datasss['description']}</i>"    return textdef getAnketaInUM(user):    age = calculate_age(user['birthdate'])    text = f'<b>{user["fio"]}</b>\n'    text += f"–•—ç–ø–∏–∫ - <i>{user['birthdate']} ({age} –ª–µ—Ç)</i>\n"    text += f"–Ω–æ–º–µ—Ä - <i>{user['number']}</i>\n"    text += f"–ü–æ—á—Ç–∞ - <i>{user['email']}</i>\n\n"    text += f"–†–æ–¥–∏—Ç–µ–ª—å (–æ–ø–µ–∫—É–Ω) - <i>{user['custody_number']}<i>\n\n"    text += f"–ó–∞–º–µ—Ç–∫–∞ - <i>{user['description']}</i>\n\n"    if user['verified']:        text += f'–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞!'    else:        text += f'–ù–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω(–∞)'    return textdef getVerifyAdmins(user):    text = getAnketa(user, 'adm_request')    user_id = user['id']    ikb_get_admin_request = InlineKeyboardMarkup(        inline_keyboard=[            [InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f'admchat_request_succes_{user_id}'),             InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f'admchat_request_denied_{user_id}')]        ]    )    app.send_message(int(admin_chat[0]), text, reply_markup=ikb_get_admin_request,                     reply_to_message_id=int(admin_chat[1]))def getNewAdmin(id):    user = app.get_users(id)    last_name = user.last_name    if not last_name:        last_name = ''    text = f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–¥–º–∏–Ω–∫—É\n"    text += f'–Æ–∑–µ—Ä - {getUserLink(user.id, f"{user.first_name}{last_name}")}'    if user.username:        text += f"@{user.username}"    ikb_get_admin_request = InlineKeyboardMarkup(        inline_keyboard=[            [InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f'admchat_newadm_succes_{id}'),             InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f'admchat_newadm_denied_{id}')]        ]    )    app.send_message(int(admin_chat[0]), text, reply_to_message_id=int(admin_chat[1]),                     reply_markup=ikb_get_admin_request)def getVMKB(upt):    if upt:        this = upt[0]        next = upt[1]        this = format_dates([this])[0]        next = format_dates([next])[0]    else:        this = '##:##'        next = '##:##'    kb_menu = ReplyKeyboardMarkup(        keyboard=[            [KeyboardButton(f"–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é ({next})")],            [KeyboardButton(f"–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é ({this})")],            [KeyboardButton("–ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")],            [KeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–∏—Ö –Ω—É–∂–¥–∞—é—â–∏—Ö—Å—è")],            [KeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton("–ü—Ä–µ–¥–ª–æ–∂–∫–∞ –∏ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")]        ],        resize_keyboard=True    )    return kb_menudef getVMKBadmin():    kb_menu = ReplyKeyboardMarkup(        keyboard=[            [KeyboardButton("–ê–¥–º–∏–Ω–∫–∞")],            [KeyboardButton(f"–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"), KeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")],            [KeyboardButton("–¢–æ–ø"), KeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],            [KeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–∏—Ö –Ω—É–∂–¥–∞—é—â–∏—Ö—Å—è")],            [KeyboardButton("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω—É–∂–¥–∞—é—â—É—é—Å—è")],        ],        resize_keyboard=True    )    return kb_menudef SENDALL(text):    users = UM.get_all_users_data()    tt = UML.get_all_date_data()    upd = []    for time in tt:        t = next(iter(time))        date, _ = t.split('-')        upd.append(date)    upt = get_closest_dates(upd)    log(upt)    if users:        for user in users:            app.send_message(user['id'], text, reply_markup=getVMKB(upt))        return True    else:        return Falsedef console(text='debug'):    app.send_message(int(admin_chat[0]), text,                     reply_to_message_id=int(admin_chat[1]))    log(text.replace('\n', '  '), 'INFO')# endregion# region STARTcfg = cp.ConfigParser()cfg.read('config.ini')token_bot = cfg.get('API_KEYS', 'tokenBot')api_hash = cfg.get('API_KEYS', 'apiHash')api_id = int(cfg.get('API_KEYS', 'apiId'))openai_api = cfg.get('API_KEYS', 'openai_api')admin_chat = cfg.get('ADMIN_CHAT', 'chat').split('_')openai.api_key = openai_apiadmin_pack = cfg.items('ADMIN_LIST')admins = []for admin in admin_pack:    admins.append(int(admin[1]))log(admins)app = Client("my_bot", api_id=api_id, api_hash=api_hash, bot_token=token_bot)app_starter = Client("my_bot12345", api_id=api_id, api_hash=api_hash, bot_token=token_bot)# endregion# region NEW MEMBERS@app.on_message(filters.new_chat_members)def new_chat_members(client, message):    for member in message.new_chat_members:        if member.id == client.me.id:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–∞—à–µ–≥–æ –±–æ—Ç–∞            client.send_message(                message.chat.id,                "–ü—Ä–∏–≤–µ—Ç, —è –Ω–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å–∫–æ–≥–æ –ø—Ä–æ—ç–∫—Ç–∞ –°–∞–∫—Ç–∞–π–º!\n–Ø –ø–æ–º–æ–≥—É –≤–∞–º –±–æ–ª–µ–µ —É–¥–æ–±–Ω–µ–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –ª–æ–≥–∏—Å—Ç–∏–∫–æ–π\n–î–ª—è –Ω–∞—á–∞–ª–∞ —Å–∞–∫—Ç–∞–π–º–µ—Ä–∞–º –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –≤ –ª—Å, –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã",            )        elif member.username:            client.send_message(                message.chat.id,                f"–ü—Ä–∏–≤–µ—Ç, {member.username}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç!",            )# endregion# region CONTACT_REGISTER@app.on_message(filters.contact & filters.private)def contact_register(_, msg):    if switch['private_check_phone'][msg.from_user.id]:        data[msg.from_user.id]['number'] = msg.contact.phone_number        msg.reply_text('–û—Ç–ª–∏—á–Ω–æ! –í–æ—Ç –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞:', reply_markup=kb_delete)        msg.reply_text(getAnketa(data[msg.from_user.id]))        msg.reply_text('–•–æ—Ç–∏—Ç–µ –µ—â–µ —á—Ç–æ –Ω–∏–±—É–¥—å –∏–∑–º–µ–Ω–∏—Ç—å?', reply_markup=kb_change_q)        switch['private_check_phone'][msg.from_user.id] = False        switch['private_change_data'][msg.from_user.id] = True        switch['private_check_register'][msg.from_user.id] = False    elif switch['private_change_data'][msg.from_user.id]:        data[msg.from_user.id]['number'] = msg.contact.phone_number        msg.reply_text('–ù–æ–º–µ—Ä –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω')        msg.reply_text('–ê–Ω–∫–µ—Ç–∞:')        msg.reply_text(getAnketa(data[msg.from_user.id]))        msg.reply_text('–•–æ—Ç–∏—Ç–µ –µ—â–µ —á—Ç–æ –Ω–∏–±—É–¥—å –∏–∑–º–µ–Ω–∏—Ç—å?', reply_markup=kb_change_q)        switch['private_check_register'][msg.from_user.id] = False        switch['private_change_data'][msg.from_user.id] = True        switch['private_check_phone'][msg.from_user.id] = False# endregion# region GROUP@app.on_message(filters.text & filters.group)def group(_, msg):    execute = msg.text    cmd = Refactor(execute)    sliced = Refactor(execute, slice=True)    user = msg.from_user    # region SWITCHMODE    global switch    for key, value in switch.items():        try:            if switch[key][msg.from_user.id]:                pass        except KeyError:            switch[key] = {msg.from_user.id: False}    # endregion    chat_id = msg.chat.id    try:        theme = msg.reply_to_message.id    except:        theme = None    if user.id in admins:        if cmd == 'setup':            msg.reply_text('–ß–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ê–¥–º–∏–Ω —á–∞—Ç–∞')            update_config(cfg, 'ADMIN_CHAT', 'chat', f'{msg.chat.id}_{msg.reply_to_message.id}')        elif cmd == 'quit':            msg.reply_text('–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏‚ùÑ')            quit()        elif sliced[0].lower() == 'c–∞–∫–±–æ—Ç' and len(sliced) > 1:            log(sliced)            text = execute.replace('—Å–∞–∫–±–æ—Ç', '')            response = ChatGptSys(app, msg, openai, translate, text)            msg.reply_text(response)    elif theme != int(admin_chat[1]):        if sliced[0].lower() in ['start', 'start@saqbibot']:            text = '–ü—Ä–∏–≤–µ—Ç —è –≤–∞—à –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç!\n'            text += '–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–∏—Å—Ç–µ–º–æ–π –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–∞ SaqTime!\n'            text += '–ù–∞–¥–µ—é—Å—å –º—ã –≤—Å–µ –ø–æ–ª–∞–¥–∏–º\n'            text += '–ê –µ—â–µ, —è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ä–∞–±–æ—Ç–∞—é –≤ –ª—Å, —Ç–∞–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ\n'            msg.reply_text(text)        elif sliced[0].lower() == 'c–∞–∫–±–æ—Ç' and len(sliced) > 1:            log(sliced)            text = execute.replace('—Å–∞–∫–±–æ—Ç', '')            response = ChatGptSys(app, msg, openai, translate, text)            msg.reply_text(response)    else:        app.delete_messages(chat_id, msg.id)        log(f'deleted {msg.text}')# endregion# region PRIVATE@app.on_message(filters.text & filters.private)def mainloop(client, msg):    execute = msg.text    cmd = Refactor(execute)    sliced = Refactor(execute, slice=True)    user = msg.from_user    # region SWITCHMODE    global switch    for key, value in switch.items():        try:            if switch[key][msg.from_user.id]:                pass        except KeyError:            switch[key] = {msg.from_user.id: False}    global global_cash    try:        if global_cash[msg.from_user.id]:            pass    except KeyError:        global_cash = {msg.from_user.id: {}}    # endregion    chat_id = msg.chat.id    chat_info = app.get_chat(chat_id)    chat_type = chat_info.type    check_in_db = UM.check_in_db(msg.from_user.id)    if check_in_db:        user_data = UM.get_user_data(msg.from_user.id)        if user_data:            verified = user_data[0]['verified']        else:            user_data = None            verified = False    else:        user_data = None        verified = False    # region ADMIN    if user.id in admins:        if cmd == 'debug':            msg.reply_text()            scheduler = BackgroundScheduler()            scheduler.add_job(send_message, 'cron', hour=12, args=[                app,                chat_id,                msg.text])  # –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ 12:00 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º            # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞            scheduler.start()        elif cmd == 'restart':            msg.reply_text('–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞!üñ•Ô∏è')            restart_upd(app_starter)        elif execute == '–ê–¥–º–∏–Ω–∫–∞':            msg.reply_text('Coming soonüçÄ')        elif execute == '–õ–æ–∫–∞—Ü–∏–∏':            msg.reply_text('Coming soonüçÄ')        elif execute == '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ':            tt = UML.get_all_date_data()            if tt:                for t in tt:                    key = next(iter(t))                    DATA = t[key]                    dataline = key.replace('-–ü–ù', '')                    l = dataline.split('.')                    dataline += f"-{int(l[0]) + 6}.{l[1]}"                    teext = f'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é {dataline}:\n\n'                    c = 1                    for key, item in DATA.items():                        teext += f"{c}. {key}\n"                        c += 1                    ikb_tt_change = InlineKeyboardMarkup(                        [                            [InlineKeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data=f'get_v_tt_{key}'),                             InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f'pass'),                             InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data=f'pass'),                             ]                        ]                    )                    msg.reply_text(teext, reply_markup=ikb_tt_change)            else:                msg.reply_text('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ')        elif execute == '–¢–æ–ø':            msg.reply_text('Coming soonüçÄ')        elif execute == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':            msg.reply_text('Coming soonüçÄ')        elif execute == '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω—É–∂–¥–∞—é—â—É—é—Å—è':            text = '–®–∞–±–ª–æ–Ω:\n'            text += '[–∏–º—è] [–≤–æ–∑—Ä–∞—Å—Ç]\n'            text += '[–Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –∞–¥—Ä–µ—Å –∫–ª–∏–Ω–∏–∫–∏]\n'            text += '[–î–∏–∞–≥–Ω–æ–∑]\n'            text += '[—Å–∫–æ–ª—å–∫–æ —Å–±–æ—Ä—ã] [—Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å]\n'            text += '[–î–∞—Ç—É –¥–æ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞–¥–æ —Å–æ–±—Ä–∞—Ç—å]\n'            msg.reply_text('–•–æ—Ä–æ—à–æ!')            msg.reply_text(text)            switch_turn(msg.from_user.id, 'private_register_needy')        elif execute == '–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ':            text = "–•–æ—Ä–æ—à–æ! –î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!"            msg.reply_text(text)            lst = GWA()            text = ''            btns = []            for key, el in lst.items():                text += f"{key}.{el} - ...\n"                btns.append([InlineKeyboardButton(text=f"{key}.{el} - nothing\n",                                                  callback_data=f'create_ttd_{msg.from_user.id}_{key}')])                global_cash[msg.from_user.id]['create_tt'] = {'list': lst}                ikb_ctt = InlineKeyboardMarkup(btns)            msg.reply_text(text, reply_markup=ikb_ctt)            switch_off(msg.from_user.id)            return    # endregion    # region REGISTER    if switch['private_check_register'][msg.from_user.id]:        info = msg.text.split('\n')        if len(info) != 5:            msg.reply_text('–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è –≤—ã —á—Ç–æ —Ç–æ –∑–∞–±—ã–ª–∏, –Ω–∞–ø–∏—à–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ', reply_markup=kb_delete)            return        fio = info[0]        birthdate = info[1]        email = info[2]        custody_number = info[3]        description = info[4]        txt = ''        if not validFIO(fio):            txt += '–§–ò–û —É–∫–∞–∑–∞–Ω–æ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n'        if not valid_birthdate(birthdate):            txt += '–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω –î–† (–î–î.–ú–ú.–ì–ì–ì–ì)\n'        if not valid_email(email):            txt += '–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω email (example@gmail.com)\n'        if not valid_number(custody_number):            txt += '–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä\n'        if len(description) <= 3:            txt += f'–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ —Å–∏–º–≤–æ–ª–æ–≤\n–û–ø–∏—Å–∞–Ω–∏–µ - <i>{description}</i>'        if txt == '':            global data            data[msg.from_user.id] = {                'id': msg.from_user.id,                'fio': fio,                'birthdate': birthdate,                'email': email,                'custody_number': custody_number,                'description': description,                'dorm': False            }            msg.reply_text('–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', reply_markup=kb_get_phone_number)            switch['private_check_phone'][msg.from_user.id] = True            switch['private_check_register'][msg.from_user.id] = True        else:            msg.reply_text(txt, reply_markup=kb_delete)    elif switch['private_change_data'][msg.from_user.id]:        if cmd == '–ò–∑–º–µ–Ω–∏—Ç—å':            msg.reply_text('–•–æ—Ä–æ—à–æ, —á—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å?', reply_markup=kb_change_data)        elif cmd == '–í—Å–µ –≤–µ—Ä–Ω–æ':            msg.reply_text(                '–û—Ç–ª–∏—á–Ω–æ! –∂–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤. –Ø –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ç–µ–±–µ —Å–æ–æ–±—â—É –∫–∞–∫ —Ç–æ–ª—å–∫–æ —Ç–µ–±—è –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É—é—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–µ –≤—ã–∫–ª—é—á–∞–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ, —Ç—É—Ç –Ω–µ—Ç —Ä–µ–∫–ª–∞–º –∏ –ø—Ä–æ—á–µ–≥–æ.',                reply_markup=kb_delete)            user = data[msg.from_user.id]            UM.register(user['birthdate'], msg.from_user.id, user['fio'], user['number'], user['custody_number'],                        user['description'], user['email'], user['dorm'])            getVerifyAdmins(user)            switch['private_change_data'][msg.from_user.id] = False        elif cmd == '–Ø –∏–∑ –æ–±—â–µ–∂–∏—Ç–∏—è':            data[msg.from_user.id]['dorm'] = True            msg.reply_text('–ó–∞–ø–æ–º–Ω–∏–ª, –µ—â–µ —á—Ç–æ —Ç–æ —Ö–æ—Ç–µ–ª–∞ –±—ã –∏–∑–º–µ–Ω–∏—Ç—å?')        elif switch['private_change_fio'][msg.from_user.id]:            if validFIO(msg.text):                data[msg.from_user.id]['fio'] = msg.text                text = getAnketa(data[msg.from_user.id])                msg.reply_text(text)                msg.reply_text('–•–æ—Ç–∏—Ç–µ –µ—â–µ —á—Ç–æ –Ω–∏–±—É–¥—å –∏–∑–º–µ–Ω–∏—Ç—å?', reply_markup=kb_change_q)                switch['private_change_fio'][msg.from_user.id] = False            else:                msg.reply_text('–í–≤–æ–¥ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ (–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á)')        elif switch['private_change_birthdate'][msg.from_user.id]:            if valid_birthdate(msg.text):                data[msg.from_user.id]['birthdate'] = msg.text                text = getAnketa(data[msg.from_user.id])                msg.reply_text(text)                msg.reply_text('–•–æ—Ç–∏—Ç–µ –µ—â–µ —á—Ç–æ –Ω–∏–±—É–¥—å –∏–∑–º–µ–Ω–∏—Ç—å?', reply_markup=kb_change_q)                switch['private_change_birthdate'][msg.from_user.id] = False            else:                msg.reply_text('–í–≤–æ–¥ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ (–î–î.–ú–ú.–ì–ì–ì–ì)')        elif switch['private_change_email'][msg.from_user.id]:            if valid_email(msg.text):                data[msg.from_user.id]['email'] = msg.text                text = getAnketa(data[msg.from_user.id])                msg.reply_text(text)                msg.reply_text('–•–æ—Ç–∏—Ç–µ –µ—â–µ —á—Ç–æ –Ω–∏–±—É–¥—å –∏–∑–º–µ–Ω–∏—Ç—å?', reply_markup=kb_change_q)                switch['private_change_email'][msg.from_user.id] = False            else:                msg.reply_text('–í–≤–æ–¥ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ (example@gmail.com)')        elif switch['private_change_custnum'][msg.from_user.id]:            if valid_number(msg.text):                data[msg.from_user.id]['custody_number'] = msg.text                text = getAnketa(data[msg.from_user.id])                msg.reply_text(text)                msg.reply_text('–•–æ—Ç–∏—Ç–µ –µ—â–µ —á—Ç–æ –Ω–∏–±—É–¥—å –∏–∑–º–µ–Ω–∏—Ç—å?', reply_markup=kb_change_q)                switch['private_change_custnum'][msg.from_user.id] = False            else:                msg.reply_text('–í–≤–æ–¥ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ (996 XXX XXX XXX)')        elif switch['private_change_description'][msg.from_user.id]:            data[msg.from_user.id]['description'] = msg.text            text = getAnketa(data[msg.from_user.id])            msg.reply_text(text)            msg.reply_text('–•–æ—Ç–∏—Ç–µ –µ—â–µ —á—Ç–æ –Ω–∏–±—É–¥—å –∏–∑–º–µ–Ω–∏—Ç—å?', reply_markup=kb_change_q)            switch['private_change_description'][msg.from_user.id] = False        elif cmd == '–§–ò–û':            msg.reply_text('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û (–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á)', reply_markup=kb_delete)            switch['private_change_fio'][msg.from_user.id] = True        elif cmd == '–î–Ω—é—Ö–∞':            msg.reply_text('–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –î–† (–î–î.–ú–ú.–ì–ì–ì–ì)', reply_markup=kb_delete)            switch['private_change_birthdate'][msg.from_user.id] = True        elif cmd == '–ò–º–µ–π–ª':            msg.reply_text('–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –∏–º–µ–π–ª (example@gmail.com)', reply_markup=kb_delete)            switch['private_change_email'][msg.from_user.id] = True        elif cmd == '–ù–æ–º–µ—Ä –æ–ø–µ–∫—É–Ω–∞':            msg.reply_text('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä', reply_markup=kb_delete)            switch['private_change_custnum'][msg.from_user.id] = True        elif cmd == '–û–ø–∏—Å–∞–Ω–∏–µ':            msg.reply_text('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ', reply_markup=kb_delete)            switch['private_change_description'][msg.from_user.id] = True    # endregion    # region MAINLOOP    if cmd == 'start':        switch_off(msg.from_user.id)        msg.reply_text(            '–ü—Ä–∏–≤–µ—Ç, –°–∞–∫—Ç–∞–π–º–µ—Ä! –°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ–µ –æ–≥—Ä–æ–º–Ω–æ–µ —Å–µ—Ä–¥—Ü–µ! –° —Ç–≤–æ–µ–π –ø–æ–º–æ—â—å—é –º—ã –ø–æ–º–æ–∂–µ–º —Å–ø–∞—Å—Ç–∏ –µ—â–µ –±–æ–ª—å—à–µ –ª—é–¥–µ–π!',            reply_markup=ReplyKeyboardRemove())        msg.reply_text(            '–ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ —Ç–æ—á–∫–∏ —Ä–∞–∑–¥–∞—á–∏ –ª–∏—Å—Ç–æ–≤–æ–∫, —Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –æ—Å—Ç–∞–≤–ª—è—Ç—å —Ç–≤–æ–∏ –æ—Ç–∑—ã–≤–∞ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –∞ –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å–¥–µ–ª–∞—Ç—å —Ç–≤–æ–π –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å–∫–∏–π –æ–ø—ã—Ç –µ—â–µ —É–¥–æ–±–Ω–µ–µ!')        msg.reply_text(            '–ù–∞—á–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n/admin - –ï—Å–ª–∏ —Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –°–∞–∫—Ç–∞–π–º\n–≠—Ç–æ –≤–∏–¥—è—Ç –≤—Å–µ, –Ω–µ –ø—Ä—ã–≥–∞–π –≤—ã—à–µ –ø–æ–∑–≤–æ–ª–µ–Ω–Ω–æ–≥–æ\n\n/register - –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤')    elif cmd == 'register':        switch_off(msg.from_user.id)        if not check_in_db:            text = '–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è\n–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ\n\n–ü—Ä–∏–º–µ—Ä:\n'            text += '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω (–§–ò)\n'            text += '01.01.2000\n'            text += 'example@gmail.com (–¢–≤–æ–π –∏–º–µ–π–ª)\n'            text += '+996 XXX XXX XXX (–ù–æ–º–µ—Ä –æ–ø–µ–∫—É–Ω–∞ –∏–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª–µ–π)\n'            text += '–î–∞–π—Ç–µ —Å—Ç–∞—Ä—à–µ–≥–æ (–û–ø–∏—Å–∞–Ω–∏–µ –∫ —Ç–≤–æ–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é)'            msg.reply_text(text, reply_markup=kb_delete)            switch['private_check_register'][msg.from_user.id] = True        elif check_in_db and not verified:            text = '–•–º, –≤–∏–∂—É —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É –≤ –±–∞–∑–µ, –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'            msg.reply_text(text, reply_markup=kb_delete)            msg.reply_text(                '–¢—ã –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–µ—à—å –≤–∑–≥–ª—è–Ω—É—Ç—å –Ω–∞ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–∞–Ω–¥–æ–π "<code>–ü—Ä–æ—Ñ–∏–ª—å</code>"\n–ò–ª–∏ –∂–µ - /profile')        else:            text = '–•–º, –≤–∏–∂—É —Ç—ã —É–∂–µ –≤ —Å–∏—Å—Ç–µ–º–µ\n–û—Ç–ª–∏—á–Ω–æ! –¢–µ–±–µ –¥–æ—Å—Ç—É–ø–µ–Ω –±–æ—Ç! –≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏'            msg.reply_text(text, reply_markup=kb_delete)            msg.reply_text(                '–¢—ã –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–µ—à—å –≤–∑–≥–ª—è–Ω—É—Ç—å –Ω–∞ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–∞–Ω–¥–æ–π "<code>–ü—Ä–æ—Ñ–∏–ª—å</code>"\n–ò–ª–∏ –∂–µ - /profile')    elif cmd in ['profile', '–ü—Ä–æ—Ñ–∏–ª—å'] or execute == '–ü—Ä–æ—Ñ–∏–ª—å':        switch_off(msg.from_user.id)        if check_in_db and verified:            get_user = UM.get_user_data(msg.from_user.id)            text = getAnketa(get_user[0])            msg.reply_text(text)        else:            msg.reply_text('–í—ã –Ω–µ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–π–¥–∏—Ç–µ\n\n–ö–æ–º–∞–Ω–¥–∞ - /register')    elif cmd in ['menu', '–ú–µ–Ω—é']:        switch_off(msg.from_user.id)        if user.id in admins:            msg.reply_text('–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω—é ‚öô', reply_markup=getVMKBadmin())        else:            if verified:                tt = UML.get_all_date_data()                upd = []                for time in tt:                    t = next(iter(time))                    date, _ = t.split('-')                    upd.append(date)                upt = get_closest_dates_str(upd)                msg.reply_text('–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω—é ‚öô', reply_markup=getVMKB(upt))    elif cmd in ['–∞–¥–º –∑–∞–ø—Ä–æ—Å', 'admin']:        switch_off(msg.from_user.id)        msg.reply_text('–•–æ—Ä–æ—à–æ! —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ –¥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω')        getNewAdmin(msg.from_user.id)    elif not check_in_db and not verified:        msg.reply_text('–í—ã –Ω–µ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–π–¥–∏—Ç–µ\n\n–ö–æ–º–∞–Ω–¥–∞ - /register')        pass    elif execute == '–ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ':        switch_off(msg.from_user.id)        if check_in_db and verified:            msg.reply_text('Coming soonüçÄ')        else:            msg.reply_text('–í—ã –Ω–µ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–π–¥–∏—Ç–µ\n\n–ö–æ–º–∞–Ω–¥–∞ - /register')    elif execute == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–∏—Ö –Ω—É–∂–¥–∞—é—â–∏—Ö—Å—è':        switch_off(msg.from_user.id)        if check_in_db and verified:            needies = UMneedy.get_all_needy_data()            if needies:                txt = '–°–ø–∏—Å–æ–∫ –Ω—É–∂–¥–∞—é—â–∏—Ö—Å—è:'                btns = []                for needy in needies:                    btns.append([InlineKeyboardButton(text=f"{needy['name']} - {needy['age']} –ª–µ—Ç",                                                      callback_data=f"v_needy_{needy['name']}")])                reply_markup = InlineKeyboardMarkup([btns])                msg.reply_text(txt, reply_markup=reply_markup)            else:                msg.reply_text('–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω—É–∂–¥–∞—é—â–∏—Ö—Å—è')        else:            msg.reply_text('–í—ã –Ω–µ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–π–¥–∏—Ç–µ\n\n–ö–æ–º–∞–Ω–¥–∞ - /register')    elif execute.startswith('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é') and check_in_db and verified:        switch_off(msg.from_user.id)        DATA = UML.get_all_date_data()        users = UM.get_all_users_data()        data_list_indexes = []        for d in DATA:            data_list_indexes.append(next(iter(d)))        this = True        S = UML.get_date(get_max_date(data_list_indexes, m=this))        SATA = S[next(iter(S))]        text = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é:\n\n"        btns = []        for key, item in SATA.items():            c = 1            allc = 0            for key1, item1 in item.items():                for itemn in item1:                    if isinstance(itemn, dict):                        item3 = itemn                    elif isinstance(itemn, str):                        checkpoint = itemn                for index, item4 in item3.items():                    if index.isdigit():                        count = item4['count'] - len(item4['volunteers'])                        allc += count                    else:                        if isinstance(item4, dict):                            count = item3['count'] - len(item3['volunteers'])                            allc += count                c += 1            if allc != 0:                count_txt = f"{allc} —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç ‚úÖ"            elif allc == 0:                count_txt = f"{allc} —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç ‚ùå"            else:                count_txt = f"{allc} —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç ‚úî"            text += f"<b>{key}</b> : <i>{count_txt}</i>\n"            text += '\n'            btns.append([InlineKeyboardButton(                text=f"{key}",                callback_data=f"j_tt_{next(iter(S))}_{key}_{msg.from_user.id}_{this}"            )])        reply_markup = InlineKeyboardMarkup(btns)        msg.reply_text(text, reply_markup=reply_markup, disable_web_page_preview=True)    elif execute.startswith('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é') and check_in_db and verified:        switch_off(msg.from_user.id)        DATA = UML.get_all_date_data()        users = UM.get_all_users_data()        data_list_indexes = []        for d in DATA:            data_list_indexes.append(next(iter(d)))        S = UML.get_date(get_max_date(data_list_indexes))        SATA = S[next(iter(S))]        text = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é:\n\n"        btns = []        for key, item in SATA.items():            c = 1            allc = 0            for key1, item1 in item.items():                for itemn in item1:                    if isinstance(itemn, dict):                        item3 = itemn                    elif isinstance(itemn, str):                        checkpoint = itemn                for index, item4 in item3.items():                    if index.isdigit():                        count = item4['count'] - len(item4['volunteers'])                        allc += count                    else:                        if isinstance(item4, dict):                            count = item3['count'] - len(item3['volunteers'])                            allc += count                c += 1            if allc != 0:                count_txt = f"{allc} —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç ‚úÖ"            elif allc == 0:                count_txt = f"{allc} —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç ‚ùå"            else:                count_txt = f"{allc} —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç ‚úî"            text += f"<b>{key}</b> : <i>{count_txt}</i>\n"            text += '\n'            btns.append([InlineKeyboardButton(                text=f"{key}",                callback_data=f"j_tt_{next(iter(S))}_{key}_{msg.from_user.id}"            )])        reply_markup = InlineKeyboardMarkup(btns)        msg.reply_text(text, reply_markup=reply_markup, disable_web_page_preview=True)    elif execute == '–ü—Ä–µ–¥–ª–æ–∂–∫–∞ –∏ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å' and check_in_db and verified:        switch_off(msg.from_user.id)        msg.reply_text(execute, reply_markup=kb_feedback)    elif execute == '–û –ù–∞—Å' and check_in_db and verified:        switch_off(msg.from_user.id)        text = get_info()        msg.reply_text(text)    elif execute == '–°–≤—è–∑–∞—Ç—å—Å—è' and check_in_db and verified:        switch_off(msg.from_user.id)        for adm in admins:            user = app.get_users(adm)            username = user.first_name            if user.last_name:                username += f' {user.last_name}'            msg.reply_text(f"<u>{getUserLink(user.id, username)}</u>")    elif execute == '–û—Ç–∑—ã–≤' and check_in_db and verified:        switch_off(msg.from_user.id)        msg.reply_text('–•–æ—Ä–æ—à–æ! –ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤ –æ –Ω–∞—à–µ–º –±–æ—Ç–µü§ç')        switch_turn(msg.from_user.id, 'private_get_feedback')    elif execute == '–ü—Ä–µ–¥–ª–æ–∂–∫–∞ (–∏–¥–µ–∏, –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –∫–æ–Ω–∫—É—Ä—Å—ã)' and check_in_db and verified:        switch_off(msg.from_user.id)        msg.reply_text('–•–æ—Ä–æ—à–æ! –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∏–¥–µ—éü§ç\n–ù–∞–º –≤–∞–∂–Ω–æ —É—Å–ª—ã—à–∞—Ç—å –≤–∞—Å, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ')        switch_turn(msg.from_user.id, 'private_get_idea')    elif switch['private_get_feedback'][msg.from_user.id]:        userok = UM.get_user_data(msg.from_user.id)[0]        text = f"–û—Ç–∑—ã–≤ –æ—Ç {getUserLink(userok['id'], userok['fio'])}:\n\n"        text += f"{msg.text}"        console(text)        tt = UML.get_all_date_data()        upd = []        for time in tt:            t = next(iter(time))            date, _ = t.split('-')            upd.append(date)        upt = get_closest_dates_str(upd)        msg.reply_text('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!', reply_markup=getVMKB(upt))    elif switch['private_get_idea'][msg.from_user.id]:        userok = UM.get_user_data(msg.from_user.id)[0]        text = f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç {getUserLink(userok['id'], userok['fio'])}:\n"        text += f"–ü—Ä–∏–º–∏—Ç–µ –∫ —Å–≤–µ–¥–µ–Ω–∏—é\n\n"        text += f"{msg.text}"        console(text)        tt = UML.get_all_date_data()        upd = []        for time in tt:            t = next(iter(time))            date, _ = t.split('-')            upd.append(date)        upt = get_closest_dates_str(upd)        msg.reply_text('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!', reply_markup=getVMKB(upt))    # endregion# endregion# region CALLBACKcb_cash = {}rg_cash = {}@app.on_callback_query()def button(bot, update):    log(f"{update.data} --- {len(update.data.encode('utf-8'))}")    data = update.data.split("_")    global global_cash    global admins    global cb_cash    global rg_cash    if data[0] == "admchat":        if data[1] == 'request':            if data[2] == 'succes':                if update.from_user.id in admins:                    check_in_db = UM.check_in_db(int(data[3]))                    if check_in_db:                        UM.update_user(int(data[3]), {'verified': True})                        update.message.edit_text(update.message.text + '\n–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω‚úÖ')                        tt = UML.get_all_date_data()                        upd = []                        for time in tt:                            t = next(iter(time))                            date, _ = t.split('-')                            upd.append(date)                        upt = get_closest_dates(upd)                        log(upt)                        app.send_message(int(data[3]),                                         '‚úÖ–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏, —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω–æ –º–µ–Ω—é',                                         reply_markup=getVMKB(upt))                    else:                        pass                else:                    update.answer('–õ—é–±–æ–ø—ã—Ç–Ω–æ–π –≤–∞—Ä–≤–∞—Ä–µ, –Ω–∞ –±–∞–∑–∞—Ä–µ –Ω–æ—Å –æ—Ç–æ—Ä–≤–∞–ª–∏!')            elif data[2] == 'denied':                if update.from_user.id in admins:                    check_in_db = UM.check_in_db(int(data[3]))                    if not check_in_db:                        UM.update_user(int(data[3]), {'verified': False})                        update.message.edit_text(update.message.text + '\n–û—Ç–∫–ª–æ–Ω–µ–Ω‚ùå')                        app.send_message(int(data[3]), '–ü–ª–æ—Ö–∞—è –Ω–æ–≤–æ—Å—Ç—å, —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω(‚ùå')                    else:                        app.delete_messages(update.chat.id, update.message.id)                else:                    update.answer('–õ—é–±–æ–ø—ã—Ç–Ω–æ–π –≤–∞—Ä–≤–∞—Ä–µ, –Ω–∞ –±–∞–∑–∞—Ä–µ –Ω–æ—Å –æ—Ç–æ—Ä–≤–∞–ª–∏!')        elif data[1] == 'newadm':            if data[2] == 'succes':                if update.from_user.id in admins:                    UM.delete_user(int(data[3]))                    user = app.get_users(int(data[3]))                    username = user.first_name                    if user.last_name:                        username += user.last_name                    update_config(cfg, 'ADMIN_LIST', username, data[3])                    admins.append(int(data[3]))                    update.message.edit_text(update.message.text + '\n–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω‚úÖ')                    app.send_message(int(data[3]),                                     '‚úÖ–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏, —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω–æ –º–µ–Ω—é',                                     reply_markup=getVMKBadmin())                else:                    update.answer('–õ—é–±–æ–ø—ã—Ç–Ω–æ–π –≤–∞—Ä–≤–∞—Ä–µ, –Ω–∞ –±–∞–∑–∞—Ä–µ –Ω–æ—Å –æ—Ç–æ—Ä–≤–∞–ª–∏!')            elif data[2] == 'denied':                if update.from_user.id in admins:                    UM.update_user(int(data[3]), {'verified': False})                    update.message.edit_text(update.message.text + '\n–û—Ç–∫–ª–æ–Ω–µ–Ω‚ùå')                    app.send_message(int(data[3]), '–ü–ª–æ—Ö–∞—è –Ω–æ–≤–æ—Å—Ç—å, —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω(‚ùå')                else:                    update.answer('–õ—é–±–æ–ø—ã—Ç–Ω–æ–π –≤–∞—Ä–≤–∞—Ä–µ, –Ω–∞ –±–∞–∑–∞—Ä–µ –Ω–æ—Å –æ—Ç–æ—Ä–≤–∞–ª–∏!')    elif data[0] == 'change':        if data[1] == 'data':            if data[3] == 'JUMA':                pass            elif data[3] == 'DEFAULT':                pass    elif data[0] == 'get':        if data[1] == 'tt':            if data[2] == 'for':                datacash = global_cash[int(data[4])]['dataset_all'][data[3]]                txt = ''                c = 1                btns = []                for key, item in datacash.items():                    txt += f"{c}. {key}\n"                    button = InlineKeyboardButton(text=f"{c}. {key}",                                                  callback_data=f"get_tt_od_{data[4]}_{data[3]}")                    btns.append(button)                    c += 1                if btns:                    button = InlineKeyboardButton(text="–ù–∞–∑–∞–¥",                                                  callback_data=f"get_tt_fd_{data[4]}")                    btns.append(button)                    reply_markup = InlineKeyboardMarkup([btns])                    update.message.edit_text(txt, reply_markup=reply_markup)                else:                    update.message.edit_text('–ò–∑–≤–∏–Ω–∏—Ç–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')            elif data[2] == 'od':                datacash = global_cash[int(data[3])]['dataset_all'][data[4]]                checkpoint = datacash[1]                DATA = datacash[0]                text = f"—Ä–µ–≥–∏–æ–Ω - {data[5]}\n"                text += f"{checkpoint}\n"                for key, item in DATA.items():                    offset = 5 - len(str(key))                    text += f"{key}.{' ' * offset}{item['name']}\n"                    text += f"    —Å—Å—ã–ª–∫–∞ - {item['link']}\n"                    text += f"    –∫–æ–º—É —Å–±–æ—Ä - {item['person']}\n\n"                reply_markup = InlineKeyboardMarkup([                    [InlineKeyboardButton(text='–ù–∞–∑–∞–¥',                                          callback_data=f"get_tt_for_{data[4]}_{data[3]}"                                          )]                ])                update.message.edit_text(text, reply_markup=reply_markup)            elif data[2] == 'fd':                all_tt = global_cash[int(data[3])]['dataset_all']                btns = []                txt = ''                c = 1                for key, item in all_tt.items():                    txt += f"{c}. {key.replace('-', ' ')}\n"                    button = InlineKeyboardButton(text=f"{c}. {key.replace('-', ' ')}",                                                  callback_data=f"get_tt_for_{key}_{data[3]}")                    btns.append([button])                    c += 1                button = InlineKeyboardButton(text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",                                              callback_data=f"save_tt_{data[3]}")                btns.append([button])                text = txt                txt += f"\n–ù–∞–∂–º–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å, —á—Ç–æ–±—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"                reply_markup = InlineKeyboardMarkup(btns)                update.message.edit_text(txt, reply_markup=reply_markup)    elif data[0] == 'create':        if data[1] == 'ttd':            user_id = int(data[2])            key = int(data[3])            K = global_cash[user_id]['create_tt']['list'][key]            text = f"{K}:„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§\n...\n"            global_cash[user_id]['create_tt']['text'] = text            btns = [                [InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å —Ä–∞–π–æ–Ω', callback_data=f'add_r_{user_id}_{key}')],                [InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é', callback_data=f'add_l_{user_id}_{key}')],                [InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –º–µ—á–µ—Ç—å', callback_data=f'add_m_{user_id}_{key}')],                [InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–µ', callback_data=f'add_o_{user_id}_{key}')],                [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data=f'create_rt_{user_id}_{key}'),                InlineKeyboardButton(text='–ü—É—Å—Ç–æ–π –¥–µ–Ω—å', callback_data=f'add_n_{user_id}_{key}')],            ]            keyboard_markup = InlineKeyboardMarkup(btns)            update.message.edit_text(text, reply_markup=keyboard_markup)        elif data[1] == 'rt':            user_id = int(data[2])            archive = global_cash[user_id]['create_tt']['list']            text = ''            btns = []            for key, el in archive.items():                text += f"{key}.{el} - ...\n"                btns.append([InlineKeyboardButton(text=f"{key}.{el} - nothing\n",                                                  callback_data=f'create_ttd_{user_id}_{key}')])                global_cash[user_id]['create_tt'] = {'list': archive}            ikb_ctt = InlineKeyboardMarkup(btns)            update.message.edit_text(text, reply_markup=ikb_ctt)            switch_off(user_id)    elif data[0] == 'add':        if data[1] == 'r':            user_id = int(data[2])            key = int(data[3])            K = global_cash[user_id]['create_tt']['list'][key]            text = global_cash[user_id]['create_tt']['text']        elif data[1] == 'l':            user_id = int(data[2])            key = int(data[3])            K = global_cash[user_id]['create_tt']['list'][key]            text = global_cash[user_id]['create_tt']['text']        elif data[1] == 'm':            user_id = int(data[2])            key = int(data[3])            K = global_cash[user_id]['create_tt']['list'][key]            text = global_cash[user_id]['create_tt']['text']        elif data[1] == 'o':            user_id = int(data[2])            key = int(data[3])            K = global_cash[user_id]['create_tt']['list'][key]            text = global_cash[user_id]['create_tt']['text']        elif data[1] == 'n':            user_id = int(data[2])            key = int(data[3])            K = global_cash[user_id]['create_tt']['list'][key]            text = global_cash[user_id]['create_tt']['text']# endregion# region CYCLESdef FRIDAY():    def job():        datelines = UML.get_all_date_data()    job()    # friday = BackgroundScheduler()    # friday.add_job(job, trigger='cron', day_of_week='fri', hour=13, minute=0)# endregion"""‚îî‚îÇ‚îú"""log('WITHOUT ERRORS', 'DEBUG')#FRIDAY()if switch_starter:    start_upd(app_starter)app.run()